// source: buku.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.buku.Buku', null, global);
goog.exportSymbol('proto.buku.BukuList', null, global);
goog.exportSymbol('proto.buku.Empty', null, global);
goog.exportSymbol('proto.buku.IdRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buku.Buku = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.buku.Buku, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.buku.Buku.displayName = 'proto.buku.Buku';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buku.IdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.buku.IdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.buku.IdRequest.displayName = 'proto.buku.IdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buku.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.buku.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.buku.Empty.displayName = 'proto.buku.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.buku.BukuList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.buku.BukuList.repeatedFields_, null);
};
goog.inherits(proto.buku.BukuList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.buku.BukuList.displayName = 'proto.buku.BukuList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.buku.Buku.prototype.toObject = function(opt_includeInstance) {
  return proto.buku.Buku.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.buku.Buku} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.buku.Buku.toObject = function(includeInstance, msg) {
  var f, obj = {
idBuku: jspb.Message.getFieldWithDefault(msg, 1, 0),
judul: jspb.Message.getFieldWithDefault(msg, 2, ""),
penulis: jspb.Message.getFieldWithDefault(msg, 3, ""),
penerbit: jspb.Message.getFieldWithDefault(msg, 4, ""),
tahunTerbit: jspb.Message.getFieldWithDefault(msg, 5, 0),
harga: jspb.Message.getFieldWithDefault(msg, 6, ""),
stok: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buku.Buku}
 */
proto.buku.Buku.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.buku.Buku;
  return proto.buku.Buku.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buku.Buku} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buku.Buku}
 */
proto.buku.Buku.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdBuku(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJudul(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPenulis(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPenerbit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTahunTerbit(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHarga(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStok(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buku.Buku.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.buku.Buku.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.buku.Buku} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.buku.Buku.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdBuku();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getJudul();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPenulis();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPenerbit();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTahunTerbit();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getHarga();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStok();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional int32 id_buku = 1;
 * @return {number}
 */
proto.buku.Buku.prototype.getIdBuku = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.buku.Buku} returns this
 */
proto.buku.Buku.prototype.setIdBuku = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string judul = 2;
 * @return {string}
 */
proto.buku.Buku.prototype.getJudul = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.buku.Buku} returns this
 */
proto.buku.Buku.prototype.setJudul = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string penulis = 3;
 * @return {string}
 */
proto.buku.Buku.prototype.getPenulis = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.buku.Buku} returns this
 */
proto.buku.Buku.prototype.setPenulis = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string penerbit = 4;
 * @return {string}
 */
proto.buku.Buku.prototype.getPenerbit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.buku.Buku} returns this
 */
proto.buku.Buku.prototype.setPenerbit = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 tahun_terbit = 5;
 * @return {number}
 */
proto.buku.Buku.prototype.getTahunTerbit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.buku.Buku} returns this
 */
proto.buku.Buku.prototype.setTahunTerbit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string harga = 6;
 * @return {string}
 */
proto.buku.Buku.prototype.getHarga = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.buku.Buku} returns this
 */
proto.buku.Buku.prototype.setHarga = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 stok = 7;
 * @return {number}
 */
proto.buku.Buku.prototype.getStok = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.buku.Buku} returns this
 */
proto.buku.Buku.prototype.setStok = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.buku.IdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.buku.IdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.buku.IdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.buku.IdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buku.IdRequest}
 */
proto.buku.IdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.buku.IdRequest;
  return proto.buku.IdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buku.IdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buku.IdRequest}
 */
proto.buku.IdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buku.IdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.buku.IdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.buku.IdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.buku.IdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.buku.IdRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.buku.IdRequest} returns this
 */
proto.buku.IdRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.buku.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.buku.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.buku.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.buku.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buku.Empty}
 */
proto.buku.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.buku.Empty;
  return proto.buku.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buku.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buku.Empty}
 */
proto.buku.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buku.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.buku.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.buku.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.buku.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.buku.BukuList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.buku.BukuList.prototype.toObject = function(opt_includeInstance) {
  return proto.buku.BukuList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.buku.BukuList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.buku.BukuList.toObject = function(includeInstance, msg) {
  var f, obj = {
bukuList: jspb.Message.toObjectList(msg.getBukuList(),
    proto.buku.Buku.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.buku.BukuList}
 */
proto.buku.BukuList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.buku.BukuList;
  return proto.buku.BukuList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.buku.BukuList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.buku.BukuList}
 */
proto.buku.BukuList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.buku.Buku;
      reader.readMessage(value,proto.buku.Buku.deserializeBinaryFromReader);
      msg.addBuku(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.buku.BukuList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.buku.BukuList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.buku.BukuList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.buku.BukuList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBukuList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.buku.Buku.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Buku buku = 1;
 * @return {!Array<!proto.buku.Buku>}
 */
proto.buku.BukuList.prototype.getBukuList = function() {
  return /** @type{!Array<!proto.buku.Buku>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.buku.Buku, 1));
};


/**
 * @param {!Array<!proto.buku.Buku>} value
 * @return {!proto.buku.BukuList} returns this
*/
proto.buku.BukuList.prototype.setBukuList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.buku.Buku=} opt_value
 * @param {number=} opt_index
 * @return {!proto.buku.Buku}
 */
proto.buku.BukuList.prototype.addBuku = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.buku.Buku, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.buku.BukuList} returns this
 */
proto.buku.BukuList.prototype.clearBukuList = function() {
  return this.setBukuList([]);
};


goog.object.extend(exports, proto.buku);
